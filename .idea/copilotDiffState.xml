<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/sweetapps/faceweight/feature/faceweight/FaceWeightEntryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/sweetapps/faceweight/feature/faceweight/FaceWeightEntryActivity.kt" />
              <option name="originalContent" value="package com.sweetapps.faceweight.feature.faceweight&#10;&#10;import android.Manifest&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.os.Environment&#10;import android.widget.ImageView&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.camera.core.CameraSelector&#10;import androidx.camera.core.ImageCapture&#10;import androidx.camera.core.ImageCaptureException&#10;import androidx.camera.core.Preview&#10;import androidx.camera.lifecycle.ProcessCameraProvider&#10;import androidx.camera.view.PreviewView&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.viewinterop.AndroidView&#10;import com.sweetapps.faceweight.R&#10;import com.sweetapps.faceweight.core.ui.BaseActivity&#10;import com.sweetapps.faceweight.core.ui.LocalSafeContentPadding&#10;import java.io.File&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import java.util.concurrent.Executor&#10;import kotlin.math.abs&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.content.FileProvider&#10;&#10;class FaceWeightEntryActivity : BaseActivity() {&#10;    override fun getScreenTitle(): String = getString(com.sweetapps.faceweight.R.string.faceweight_title)&#10;&#10;    // CameraX&#10;    private var imageCapture: ImageCapture? = null&#10;    private lateinit var cameraExecutor: Executor&#10;    private var isCameraPermissionGranted = false&#10;&#10;    private val permissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted -&gt;&#10;        isCameraPermissionGranted = granted&#10;        if (granted) recreate() else Toast.makeText(this, &quot;카메라 권한이 필요합니다.&quot;, Toast.LENGTH_SHORT).show()&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        cameraExecutor = ContextCompat.getMainExecutor(this)&#10;&#10;        val entryAction = intent?.getStringExtra(&quot;entry_action&quot;)&#10;        val imageUri = intent?.getStringExtra(&quot;image_uri&quot;)&#10;&#10;        // 권한 확인 (카메라 UI가 기본 표시되므로 선체크)&#10;        isCameraPermissionGranted = ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == android.content.pm.PackageManager.PERMISSION_GRANTED&#10;        if (!isCameraPermissionGranted &amp;&amp; imageUri.isNullOrBlank()) {&#10;            permissionLauncher.launch(Manifest.permission.CAMERA)&#10;            // return 제거: 즉시 UI를 그리되, 권한 승인 후 recreate()로 카메라 시작&#10;        }&#10;&#10;        setContent {&#10;            BaseScreen() {&#10;                // imageUri 또는 gallery로 진입 시 기존 결과 화면 유지, 그 외에는 카메라 메인 화면&#10;                if (!imageUri.isNullOrBlank() || entryAction == &quot;gallery&quot; || entryAction == &quot;camera_result&quot;) {&#10;                    FaceWeightResultScreen(entryAction, imageUri)&#10;                } else {&#10;                    FaceWeightCameraScreen()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun requestCameraPermissionAgain() {&#10;        permissionLauncher.launch(Manifest.permission.CAMERA)&#10;    }&#10;&#10;    @Composable&#10;    private fun FaceWeightCameraScreen() {&#10;        val context = LocalContext.current&#10;        var previewViewRef by remember { mutableStateOf&lt;PreviewView?&gt;(null) }&#10;        var isFront by remember { mutableStateOf(true) }&#10;        var qualityTab by remember { mutableStateOf(0) }&#10;        val hasPermission = isCameraPermissionGranted&#10;&#10;        // 카메라 시작/재시작 (권한 있을 때만)&#10;        LaunchedEffect(previewViewRef, isFront, hasPermission) {&#10;            if (!hasPermission) return@LaunchedEffect&#10;            val pv = previewViewRef ?: return@LaunchedEffect&#10;            startCamera(pv, isFront)&#10;        }&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // 상단 바: 좌 알림, 중앙 3개 선택, 우 카메라 전환&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 12.dp, vertical = 12.dp)&#10;            ) {&#10;                IconButton(&#10;                    onClick = { Toast.makeText(context, &quot;알림: 준비 중&quot;, Toast.LENGTH_SHORT).show() },&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .align(Alignment.CenterStart)&#10;                        .clip(CircleShape)&#10;                        .background(Color.Black.copy(alpha = 0.25f))&#10;                ) { Icon(Icons.Filled.Notifications, contentDescription = null, tint = Color.White) }&#10;&#10;                TopQualitySelector(&#10;                    selected = qualityTab,&#10;                    onSelect = { qualityTab = it },&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                )&#10;&#10;                IconButton(&#10;                    onClick = { isFront = !isFront },&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .align(Alignment.CenterEnd)&#10;                        .clip(CircleShape)&#10;                        .background(Color.Black.copy(alpha = 0.25f))&#10;                ) { Icon(Icons.Filled.FlipCameraAndroid, contentDescription = null, tint = Color.White) }&#10;            }&#10;&#10;            // 중단: 권한 여부에 따라 프리뷰 or 안내&#10;            if (hasPermission) {&#10;                AndroidView(factory = { ctx -&gt;&#10;                    PreviewView(ctx).also { previewViewRef = it }&#10;                }, modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .weight(1f)&#10;                )&#10;            } else {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(1f),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&quot;카메라 권한이 필요합니다.&quot;, color = MaterialTheme.colorScheme.onSurface)&#10;                        Spacer(Modifier.height(8.dp))&#10;                        OutlinedButton(onClick = { requestCameraPermissionAgain() }) {&#10;                            Text(&quot;권한 다시 요청&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // 하단: 5개 버튼(가운데 셔터)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp, vertical = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceEvenly,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                BottomItem(Icons.Filled.Tune, &quot;보정&quot;) { toast(context, &quot;보정: 준비 중&quot;) }&#10;                BottomItem(Icons.Filled.AutoAwesome, &quot;이펙트&quot;) { toast(context, &quot;이펙트: 준비 중&quot;) }&#10;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(84.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color.White.copy(alpha = 0.08f))&#10;                        .clickable { takePhotoAndNavigate() },&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(68.dp)&#10;                            .clip(CircleShape)&#10;                            .background(Color.White)&#10;                            .border(2.dp, Color.White.copy(alpha = 0.85f), CircleShape)&#10;                    )&#10;                }&#10;&#10;                BottomItem(Icons.Filled.FaceRetouchingNatural, &quot;뷰티&quot;) { toast(context, &quot;뷰티: 준비 중&quot;) }&#10;                BottomItem(Icons.Filled.FilterAlt, &quot;필터&quot;) { toast(context, &quot;필터: 준비 중&quot;) }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startCamera(previewView: PreviewView, isFront: Boolean) {&#10;        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)&#10;        cameraProviderFuture.addListener({&#10;            val cameraProvider = cameraProviderFuture.get()&#10;            val preview = Preview.Builder().build().also { it.setSurfaceProvider(previewView.surfaceProvider) }&#10;            imageCapture = ImageCapture.Builder().setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY).build()&#10;            val selector = if (isFront) CameraSelector.DEFAULT_FRONT_CAMERA else CameraSelector.DEFAULT_BACK_CAMERA&#10;            try {&#10;                cameraProvider.unbindAll()&#10;                cameraProvider.bindToLifecycle(this, selector, preview, imageCapture)&#10;            } catch (_: Exception) {&#10;                Toast.makeText(this, &quot;카메라 초기화 실패&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }, ContextCompat.getMainExecutor(this))&#10;    }&#10;&#10;    private fun takePhotoAndNavigate() {&#10;        val capture = imageCapture ?: run { Toast.makeText(this, &quot;카메라 준비 중&quot;, Toast.LENGTH_SHORT).show(); return }&#10;        val photoFile = createImageFile()&#10;        val output = ImageCapture.OutputFileOptions.Builder(photoFile).build()&#10;        capture.takePicture(output, cameraExecutor, object : ImageCapture.OnImageSavedCallback {&#10;            override fun onImageSaved(outputFileResults: ImageCapture.OutputFileResults) {&#10;                val savedUri: Uri = FileProvider.getUriForFile(this@FaceWeightEntryActivity, &quot;${applicationContext.packageName}.fileprovider&quot;, photoFile)&#10;                val intent = Intent(this@FaceWeightEntryActivity, FaceWeightEntryActivity::class.java).apply {&#10;                    putExtra(&quot;entry_action&quot;, &quot;camera_result&quot;)&#10;                    putExtra(&quot;image_uri&quot;, savedUri.toString())&#10;                    addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)&#10;                }&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            override fun onError(exception: ImageCaptureException) {&#10;                runOnUiThread { Toast.makeText(this@FaceWeightEntryActivity, &quot;사진 저장 실패: ${exception.message}&quot;, Toast.LENGTH_SHORT).show() }&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun createImageFile(): File {&#10;        val sdf = SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;, Locale.US)&#10;        val filename = &quot;FW_IMG_${sdf.format(Date())}.jpg&quot;&#10;        val dir = getExternalFilesDir(Environment.DIRECTORY_PICTURES)&#10;        if (dir != null &amp;&amp; !dir.exists()) dir.mkdirs()&#10;        return File(dir, filename)&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FaceWeightResultScreen(entryAction: String?, imageUri: String?) {&#10;    val safePadding = LocalSafeContentPadding.current&#10;    val context = LocalContext.current&#10;    val actionLabel = when (entryAction) {&#10;        &quot;camera&quot; -&gt; context.getString(R.string.faceweight_entry_camera_selected)&#10;        &quot;gallery&quot; -&gt; context.getString(R.string.faceweight_entry_gallery_selected)&#10;        &quot;camera_result&quot; -&gt; context.getString(R.string.faceweight_entry_camera_selected)&#10;        else -&gt; context.getString(R.string.faceweight_entry_none_selected)&#10;    }&#10;&#10;    // 기존 결과 UI 유지&#10;    val offsets = listOf(-10, -5, 0, 5, 10)&#10;    var selectedIndex by remember { mutableStateOf(2) }&#10;&#10;    val (sampleName, baseWeight, similarity) = remember(imageUri) {&#10;        if (!imageUri.isNullOrBlank()) {&#10;            val h = abs(imageUri.hashCode())&#10;            val name = &quot;샘플 #&quot; + ((h % 100) + 1)&#10;            val weight = 50 + (h % 36)&#10;            val sim = 60 + ((h / 7) % 36)&#10;            Triple(name, weight, sim)&#10;        } else {&#10;            Triple(&quot;샘플 #001&quot;, 65, 85)&#10;        }&#10;    }&#10;&#10;    val selectedOffset = offsets[selectedIndex]&#10;    val simulatedWeight = baseWeight + selectedOffset&#10;    val scaleTarget = remember(selectedOffset) { 1f + (selectedOffset.toFloat() * 0.006f) }&#10;    val animatedScale by animateFloatAsState(targetValue = scaleTarget)&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp, vertical = 12.dp)&#10;            .padding(safePadding),&#10;        verticalArrangement = Arrangement.Top,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Surface(&#10;            color = MaterialTheme.colorScheme.surface,&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 0.dp,&#10;            shadowElevation = 1.dp,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Column(modifier = Modifier.fillMaxWidth().padding(20.dp)) {&#10;                Text(&#10;                    text = context.getString(R.string.faceweight_title) + &quot; (베타)&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = context.getString(R.string.faceweight_card_subtitle),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Spacer(modifier = Modifier.height(10.dp))&#10;                Text(text = actionLabel, style = MaterialTheme.typography.labelMedium, color = MaterialTheme.colorScheme.primary)&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(12.dp)) {&#10;            Box(modifier = Modifier&#10;                .weight(1f)&#10;                .height(260.dp)&#10;                .graphicsLayer(scaleX = animatedScale, scaleY = animatedScale)&#10;            ) {&#10;                if (!imageUri.isNullOrBlank()) {&#10;                    AndroidView(factory = { ctx -&gt;&#10;                        ImageView(ctx).apply {&#10;                            adjustViewBounds = true&#10;                            scaleType = ImageView.ScaleType.CENTER_CROP&#10;                            setImageURI(Uri.parse(imageUri))&#10;                        }&#10;                    }, modifier = Modifier.fillMaxSize())&#10;                } else {&#10;                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                        Text(text = &quot;이미지 없음&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                }&#10;            }&#10;&#10;            Surface(modifier = Modifier.width(160.dp).height(260.dp), shape = MaterialTheme.shapes.medium, tonalElevation = 0.dp) {&#10;                Column(modifier = Modifier.fillMaxSize().padding(12.dp), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    Text(text = context.getString(R.string.faceweight_matched_label), style = MaterialTheme.typography.labelMedium)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    if (!imageUri.isNullOrBlank()) {&#10;                        AndroidView(factory = { ctx -&gt;&#10;                            ImageView(ctx).apply {&#10;                                scaleType = ImageView.ScaleType.CENTER_CROP&#10;                                setImageURI(Uri.parse(imageUri))&#10;                            }&#10;                        }, modifier = Modifier.fillMaxWidth().height(100.dp))&#10;                    }&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(text = sampleName, style = MaterialTheme.typography.titleSmall)&#10;                    Spacer(modifier = Modifier.height(6.dp))&#10;                    Text(text = String.format(context.getString(R.string.faceweight_similarity_format), similarity), style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.primary)&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    Text(text = context.getString(R.string.faceweight_simulated_label), style = MaterialTheme.typography.labelSmall)&#10;                    Spacer(modifier = Modifier.height(6.dp))&#10;                    Text(text = &quot;%d kg&quot;.format(simulatedWeight), style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Bold), color = MaterialTheme.colorScheme.primary)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {&#10;            offsets.forEachIndexed { idx, off -&gt;&#10;                val label = when (off) {&#10;                    -10 -&gt; context.getString(R.string.faceweight_simulate_minus10)&#10;                    -5 -&gt; context.getString(R.string.faceweight_simulate_minus5)&#10;                    0 -&gt; context.getString(R.string.faceweight_simulate_original)&#10;                    5 -&gt; context.getString(R.string.faceweight_simulate_plus5)&#10;                    10 -&gt; context.getString(R.string.faceweight_simulate_plus10)&#10;                    else -&gt; &quot;$off&quot;&#10;                }&#10;                val isSelected = idx == selectedIndex&#10;                Button(onClick = { selectedIndex = idx }, colors = ButtonDefaults.buttonColors(containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surface)) {&#10;                    Text(text = label, color = if (isSelected) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurface)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(text = context.getString(R.string.faceweight_simulate_hint), style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TopQualitySelector(selected: Int, onSelect: (Int) -&gt; Unit, modifier: Modifier = Modifier) {&#10;    Surface(&#10;        modifier = modifier,&#10;        color = Color.Black.copy(alpha = 0.25f),&#10;        shape = RoundedCornerShape(24.dp)&#10;    ) {&#10;        Row(modifier = Modifier.padding(horizontal = 8.dp, vertical = 6.dp), horizontalArrangement = Arrangement.spacedBy(6.dp), verticalAlignment = Alignment.CenterVertically) {&#10;            QualityChip(&quot;기본&quot;, selected == 0) { onSelect(0) }&#10;            QualityChip(&quot;고화질&quot;, selected == 1) { onSelect(1) }&#10;            QualityChip(&quot;아이폰&quot;, selected == 2) { onSelect(2) }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QualityChip(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Surface(&#10;        color = if (selected) Color.White else Color.Transparent,&#10;        contentColor = if (selected) Color.Black else Color.White,&#10;        shape = RoundedCornerShape(18.dp)&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            modifier = Modifier.clickable { onClick() }.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            style = MaterialTheme.typography.labelMedium,&#10;            fontWeight = if (selected) FontWeight.SemiBold else FontWeight.Normal,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun BottomItem(icon: androidx.compose.ui.graphics.vector.ImageVector, label: String, onClick: () -&gt; Unit) {&#10;    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(44.dp)&#10;                .clip(CircleShape)&#10;                .background(Color.Black.copy(alpha = 0.25f))&#10;                .clickable { onClick() },&#10;            contentAlignment = Alignment.Center&#10;        ) { Icon(icon, contentDescription = label, tint = Color.White) }&#10;        Spacer(Modifier.height(6.dp))&#10;        Text(label, color = Color.White, style = MaterialTheme.typography.labelSmall)&#10;    }&#10;}&#10;&#10;private fun toast(ctx: Context, msg: String) { Toast.makeText(ctx, msg, Toast.LENGTH_SHORT).show() }&#10;" />
              <option name="updatedContent" value="package com.sweetapps.faceweight.feature.faceweight&#10;&#10;import android.Manifest&#10;import android.content.Context&#10;import android.content.Intent&#10;import android.net.Uri&#10;import android.os.Bundle&#10;import android.os.Environment&#10;import android.widget.ImageView&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.camera.core.CameraSelector&#10;import androidx.camera.core.ImageCapture&#10;import androidx.camera.core.ImageCaptureException&#10;import androidx.camera.core.Preview&#10;import androidx.camera.lifecycle.ProcessCameraProvider&#10;import androidx.camera.view.PreviewView&#10;import androidx.compose.animation.core.animateFloatAsState&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.viewinterop.AndroidView&#10;import com.sweetapps.faceweight.R&#10;import com.sweetapps.faceweight.core.ui.BaseActivity&#10;import com.sweetapps.faceweight.core.ui.LocalSafeContentPadding&#10;import java.io.File&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import java.util.concurrent.Executor&#10;import kotlin.math.abs&#10;import androidx.core.content.ContextCompat&#10;import androidx.core.content.FileProvider&#10;&#10;class FaceWeightEntryActivity : BaseActivity() {&#10;    override fun getScreenTitle(): String = getString(com.sweetapps.faceweight.R.string.faceweight_title)&#10;&#10;    // CameraX&#10;    private var imageCapture: ImageCapture? = null&#10;    private lateinit var cameraExecutor: Executor&#10;    private var isCameraPermissionGranted = false&#10;&#10;    private val permissionLauncher = registerForActivityResult(ActivityResultContracts.RequestPermission()) { granted -&gt;&#10;        isCameraPermissionGranted = granted&#10;        if (granted) recreate() else Toast.makeText(this, &quot;카메라 권한이 필요합니다.&quot;, Toast.LENGTH_SHORT).show()&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        cameraExecutor = ContextCompat.getMainExecutor(this)&#10;&#10;        val entryAction = intent?.getStringExtra(&quot;entry_action&quot;)&#10;        val imageUri = intent?.getStringExtra(&quot;image_uri&quot;)&#10;&#10;        // 권한 확인 (카메라 UI가 기본 표시되므로 선체크)&#10;        isCameraPermissionGranted = ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) == android.content.pm.PackageManager.PERMISSION_GRANTED&#10;        if (!isCameraPermissionGranted &amp;&amp; imageUri.isNullOrBlank()) {&#10;            permissionLauncher.launch(Manifest.permission.CAMERA)&#10;            // return 제거: 즉시 UI를 그리되, 권한 승인 후 recreate()로 카메라 시작&#10;        }&#10;&#10;        setContent {&#10;            val inCamera = imageUri.isNullOrBlank() &amp;&amp; entryAction != &quot;gallery&quot; &amp;&amp; entryAction != &quot;camera_result&quot;&#10;            BaseScreen(showTopBar = !inCamera) {&#10;                // imageUri 또는 gallery로 진입 시 기존 결과 화면 유지, 그 외에는 카메라 메인 화면&#10;                if (!imageUri.isNullOrBlank() || entryAction == &quot;gallery&quot; || entryAction == &quot;camera_result&quot;) {&#10;                    FaceWeightResultScreen(entryAction, imageUri)&#10;                } else {&#10;                    FaceWeightCameraScreen()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun requestCameraPermissionAgain() {&#10;        permissionLauncher.launch(Manifest.permission.CAMERA)&#10;    }&#10;&#10;    @Composable&#10;    private fun FaceWeightCameraScreen() {&#10;        val context = LocalContext.current&#10;        var previewViewRef by remember { mutableStateOf&lt;PreviewView?&gt;(null) }&#10;        var isFront by remember { mutableStateOf(true) }&#10;        var qualityTab by remember { mutableStateOf(0) }&#10;        val hasPermission = isCameraPermissionGranted&#10;&#10;        // 카메라 시작/재시작 (권한 있을 때만)&#10;        LaunchedEffect(previewViewRef, isFront, hasPermission) {&#10;            if (!hasPermission) return@LaunchedEffect&#10;            val pv = previewViewRef ?: return@LaunchedEffect&#10;            startCamera(pv, isFront)&#10;        }&#10;&#10;        Column(modifier = Modifier.fillMaxSize()) {&#10;            // 상단 바: 좌 알림, 중앙 3개 선택, 우 카메라 전환&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 12.dp, vertical = 12.dp)&#10;            ) {&#10;                IconButton(&#10;                    onClick = { Toast.makeText(context, &quot;알림: 준비 중&quot;, Toast.LENGTH_SHORT).show() },&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .align(Alignment.CenterStart)&#10;                        .clip(CircleShape)&#10;                        .background(Color.Black.copy(alpha = 0.25f))&#10;                ) { Icon(Icons.Filled.Notifications, contentDescription = null, tint = Color.White) }&#10;&#10;                TopQualitySelector(&#10;                    selected = qualityTab,&#10;                    onSelect = { qualityTab = it },&#10;                    modifier = Modifier.align(Alignment.Center)&#10;                )&#10;&#10;                IconButton(&#10;                    onClick = { isFront = !isFront },&#10;                    modifier = Modifier&#10;                        .size(40.dp)&#10;                        .align(Alignment.CenterEnd)&#10;                        .clip(CircleShape)&#10;                        .background(Color.Black.copy(alpha = 0.25f))&#10;                ) { Icon(Icons.Filled.FlipCameraAndroid, contentDescription = null, tint = Color.White) }&#10;            }&#10;&#10;            // 중단: 권한 여부에 따라 프리뷰 or 안내&#10;            if (hasPermission) {&#10;                AndroidView(factory = { ctx -&gt;&#10;                    PreviewView(ctx).also { previewViewRef = it }&#10;                }, modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .weight(1f)&#10;                )&#10;            } else {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .weight(1f),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                        Text(&quot;카메라 권한이 필요합니다.&quot;, color = MaterialTheme.colorScheme.onSurface)&#10;                        Spacer(Modifier.height(8.dp))&#10;                        OutlinedButton(onClick = { requestCameraPermissionAgain() }) {&#10;                            Text(&quot;권한 다시 요청&quot;)&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;&#10;            // 하단: 5개 버튼(가운데 셔터)&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(horizontal = 16.dp, vertical = 16.dp),&#10;                horizontalArrangement = Arrangement.SpaceEvenly,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                BottomItem(Icons.Filled.Tune, &quot;보정&quot;) { toast(context, &quot;보정: 준비 중&quot;) }&#10;                BottomItem(Icons.Filled.AutoAwesome, &quot;이펙트&quot;) { toast(context, &quot;이펙트: 준비 중&quot;) }&#10;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(84.dp)&#10;                        .clip(CircleShape)&#10;                        .background(Color.White.copy(alpha = 0.08f))&#10;                        .clickable { takePhotoAndNavigate() },&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Box(&#10;                        modifier = Modifier&#10;                            .size(68.dp)&#10;                            .clip(CircleShape)&#10;                            .background(Color.White)&#10;                            .border(2.dp, Color.White.copy(alpha = 0.85f), CircleShape)&#10;                    )&#10;                }&#10;&#10;                BottomItem(Icons.Filled.FaceRetouchingNatural, &quot;뷰티&quot;) { toast(context, &quot;뷰티: 준비 중&quot;) }&#10;                BottomItem(Icons.Filled.FilterAlt, &quot;필터&quot;) { toast(context, &quot;필터: 준비 중&quot;) }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startCamera(previewView: PreviewView, isFront: Boolean) {&#10;        val cameraProviderFuture = ProcessCameraProvider.getInstance(this)&#10;        cameraProviderFuture.addListener({&#10;            val cameraProvider = cameraProviderFuture.get()&#10;            val preview = Preview.Builder().build().also { it.setSurfaceProvider(previewView.surfaceProvider) }&#10;            imageCapture = ImageCapture.Builder().setCaptureMode(ImageCapture.CAPTURE_MODE_MINIMIZE_LATENCY).build()&#10;            val selector = if (isFront) CameraSelector.DEFAULT_FRONT_CAMERA else CameraSelector.DEFAULT_BACK_CAMERA&#10;            try {&#10;                cameraProvider.unbindAll()&#10;                cameraProvider.bindToLifecycle(this, selector, preview, imageCapture)&#10;            } catch (_: Exception) {&#10;                Toast.makeText(this, &quot;카메라 초기화 실패&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }, ContextCompat.getMainExecutor(this))&#10;    }&#10;&#10;    private fun takePhotoAndNavigate() {&#10;        val capture = imageCapture ?: run { Toast.makeText(this, &quot;카메라 준비 중&quot;, Toast.LENGTH_SHORT).show(); return }&#10;        val photoFile = createImageFile()&#10;        val output = ImageCapture.OutputFileOptions.Builder(photoFile).build()&#10;        capture.takePicture(output, cameraExecutor, object : ImageCapture.OnImageSavedCallback {&#10;            override fun onImageSaved(outputFileResults: ImageCapture.OutputFileResults) {&#10;                val savedUri: Uri = FileProvider.getUriForFile(this@FaceWeightEntryActivity, &quot;${applicationContext.packageName}.fileprovider&quot;, photoFile)&#10;                val intent = Intent(this@FaceWeightEntryActivity, FaceWeightEntryActivity::class.java).apply {&#10;                    putExtra(&quot;entry_action&quot;, &quot;camera_result&quot;)&#10;                    putExtra(&quot;image_uri&quot;, savedUri.toString())&#10;                    addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION)&#10;                }&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            override fun onError(exception: ImageCaptureException) {&#10;                runOnUiThread { Toast.makeText(this@FaceWeightEntryActivity, &quot;사진 저장 실패: ${exception.message}&quot;, Toast.LENGTH_SHORT).show() }&#10;            }&#10;        })&#10;    }&#10;&#10;    private fun createImageFile(): File {&#10;        val sdf = SimpleDateFormat(&quot;yyyyMMdd_HHmmss&quot;, Locale.US)&#10;        val filename = &quot;FW_IMG_${sdf.format(Date())}.jpg&quot;&#10;        val dir = getExternalFilesDir(Environment.DIRECTORY_PICTURES)&#10;        if (dir != null &amp;&amp; !dir.exists()) dir.mkdirs()&#10;        return File(dir, filename)&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun FaceWeightResultScreen(entryAction: String?, imageUri: String?) {&#10;    val safePadding = LocalSafeContentPadding.current&#10;    val context = LocalContext.current&#10;    val actionLabel = when (entryAction) {&#10;        &quot;camera&quot; -&gt; context.getString(R.string.faceweight_entry_camera_selected)&#10;        &quot;gallery&quot; -&gt; context.getString(R.string.faceweight_entry_gallery_selected)&#10;        &quot;camera_result&quot; -&gt; context.getString(R.string.faceweight_entry_camera_selected)&#10;        else -&gt; context.getString(R.string.faceweight_entry_none_selected)&#10;    }&#10;&#10;    // 기존 결과 UI 유지&#10;    val offsets = listOf(-10, -5, 0, 5, 10)&#10;    var selectedIndex by remember { mutableStateOf(2) }&#10;&#10;    val (sampleName, baseWeight, similarity) = remember(imageUri) {&#10;        if (!imageUri.isNullOrBlank()) {&#10;            val h = abs(imageUri.hashCode())&#10;            val name = &quot;샘플 #&quot; + ((h % 100) + 1)&#10;            val weight = 50 + (h % 36)&#10;            val sim = 60 + ((h / 7) % 36)&#10;            Triple(name, weight, sim)&#10;        } else {&#10;            Triple(&quot;샘플 #001&quot;, 65, 85)&#10;        }&#10;    }&#10;&#10;    val selectedOffset = offsets[selectedIndex]&#10;    val simulatedWeight = baseWeight + selectedOffset&#10;    val scaleTarget = remember(selectedOffset) { 1f + (selectedOffset.toFloat() * 0.006f) }&#10;    val animatedScale by animateFloatAsState(targetValue = scaleTarget)&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(horizontal = 16.dp, vertical = 12.dp)&#10;            .padding(safePadding),&#10;        verticalArrangement = Arrangement.Top,&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Surface(&#10;            color = MaterialTheme.colorScheme.surface,&#10;            shape = MaterialTheme.shapes.medium,&#10;            tonalElevation = 0.dp,&#10;            shadowElevation = 1.dp,&#10;            modifier = Modifier.fillMaxWidth()&#10;        ) {&#10;            Column(modifier = Modifier.fillMaxWidth().padding(20.dp)) {&#10;                Text(&#10;                    text = context.getString(R.string.faceweight_title) + &quot; (베타)&quot;,&#10;                    style = MaterialTheme.typography.titleMedium.copy(fontWeight = FontWeight.Bold),&#10;                    color = MaterialTheme.colorScheme.onSurface&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = context.getString(R.string.faceweight_card_subtitle),&#10;                    style = MaterialTheme.typography.bodyMedium,&#10;                    color = MaterialTheme.colorScheme.onSurfaceVariant&#10;                )&#10;                Spacer(modifier = Modifier.height(10.dp))&#10;                Text(text = actionLabel, style = MaterialTheme.typography.labelMedium, color = MaterialTheme.colorScheme.primary)&#10;            }&#10;        }&#10;&#10;        Spacer(Modifier.height(12.dp))&#10;&#10;        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.spacedBy(12.dp)) {&#10;            Box(modifier = Modifier&#10;                .weight(1f)&#10;                .height(260.dp)&#10;                .graphicsLayer(scaleX = animatedScale, scaleY = animatedScale)&#10;            ) {&#10;                if (!imageUri.isNullOrBlank()) {&#10;                    AndroidView(factory = { ctx -&gt;&#10;                        ImageView(ctx).apply {&#10;                            adjustViewBounds = true&#10;                            scaleType = ImageView.ScaleType.CENTER_CROP&#10;                            setImageURI(Uri.parse(imageUri))&#10;                        }&#10;                    }, modifier = Modifier.fillMaxSize())&#10;                } else {&#10;                    Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {&#10;                        Text(text = &quot;이미지 없음&quot;, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;                    }&#10;                }&#10;            }&#10;&#10;            Surface(modifier = Modifier.width(160.dp).height(260.dp), shape = MaterialTheme.shapes.medium, tonalElevation = 0.dp) {&#10;                Column(modifier = Modifier.fillMaxSize().padding(12.dp), horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    Text(text = context.getString(R.string.faceweight_matched_label), style = MaterialTheme.typography.labelMedium)&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    if (!imageUri.isNullOrBlank()) {&#10;                        AndroidView(factory = { ctx -&gt;&#10;                            ImageView(ctx).apply {&#10;                                scaleType = ImageView.ScaleType.CENTER_CROP&#10;                                setImageURI(Uri.parse(imageUri))&#10;                            }&#10;                        }, modifier = Modifier.fillMaxWidth().height(100.dp))&#10;                    }&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(text = sampleName, style = MaterialTheme.typography.titleSmall)&#10;                    Spacer(modifier = Modifier.height(6.dp))&#10;                    Text(text = String.format(context.getString(R.string.faceweight_similarity_format), similarity), style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.primary)&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    Text(text = context.getString(R.string.faceweight_simulated_label), style = MaterialTheme.typography.labelSmall)&#10;                    Spacer(modifier = Modifier.height(6.dp))&#10;                    Text(text = &quot;%d kg&quot;.format(simulatedWeight), style = MaterialTheme.typography.headlineMedium.copy(fontWeight = FontWeight.Bold), color = MaterialTheme.colorScheme.primary)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;        Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceEvenly) {&#10;            offsets.forEachIndexed { idx, off -&gt;&#10;                val label = when (off) {&#10;                    -10 -&gt; context.getString(R.string.faceweight_simulate_minus10)&#10;                    -5 -&gt; context.getString(R.string.faceweight_simulate_minus5)&#10;                    0 -&gt; context.getString(R.string.faceweight_simulate_original)&#10;                    5 -&gt; context.getString(R.string.faceweight_simulate_plus5)&#10;                    10 -&gt; context.getString(R.string.faceweight_simulate_plus10)&#10;                    else -&gt; &quot;$off&quot;&#10;                }&#10;                val isSelected = idx == selectedIndex&#10;                Button(onClick = { selectedIndex = idx }, colors = ButtonDefaults.buttonColors(containerColor = if (isSelected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.surface)) {&#10;                    Text(text = label, color = if (isSelected) MaterialTheme.colorScheme.onPrimary else MaterialTheme.colorScheme.onSurface)&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(text = context.getString(R.string.faceweight_simulate_hint), style = MaterialTheme.typography.bodySmall, color = MaterialTheme.colorScheme.onSurfaceVariant)&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TopQualitySelector(selected: Int, onSelect: (Int) -&gt; Unit, modifier: Modifier = Modifier) {&#10;    Surface(&#10;        modifier = modifier,&#10;        color = Color.Black.copy(alpha = 0.25f),&#10;        shape = RoundedCornerShape(24.dp)&#10;    ) {&#10;        Row(modifier = Modifier.padding(horizontal = 8.dp, vertical = 6.dp), horizontalArrangement = Arrangement.spacedBy(6.dp), verticalAlignment = Alignment.CenterVertically) {&#10;            QualityChip(&quot;기본&quot;, selected == 0) { onSelect(0) }&#10;            QualityChip(&quot;고화질&quot;, selected == 1) { onSelect(1) }&#10;            QualityChip(&quot;아이폰&quot;, selected == 2) { onSelect(2) }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun QualityChip(text: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;    Surface(&#10;        color = if (selected) Color.White else Color.Transparent,&#10;        contentColor = if (selected) Color.Black else Color.White,&#10;        shape = RoundedCornerShape(18.dp)&#10;    ) {&#10;        Text(&#10;            text = text,&#10;            modifier = Modifier.clickable { onClick() }.padding(horizontal = 12.dp, vertical = 6.dp),&#10;            style = MaterialTheme.typography.labelMedium,&#10;            fontWeight = if (selected) FontWeight.SemiBold else FontWeight.Normal,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun BottomItem(icon: androidx.compose.ui.graphics.vector.ImageVector, label: String, onClick: () -&gt; Unit) {&#10;    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(44.dp)&#10;                .clip(CircleShape)&#10;                .background(Color.Black.copy(alpha = 0.25f))&#10;                .clickable { onClick() },&#10;            contentAlignment = Alignment.Center&#10;        ) { Icon(icon, contentDescription = label, tint = Color.White) }&#10;        Spacer(Modifier.height(6.dp))&#10;        Text(label, color = Color.White, style = MaterialTheme.typography.labelSmall)&#10;    }&#10;}&#10;&#10;private fun toast(ctx: Context, msg: String) { Toast.makeText(ctx, msg, Toast.LENGTH_SHORT).show() }" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>